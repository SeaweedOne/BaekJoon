import java.util.Scanner;
//어떤 숫자가 줄어들지 않는다는 것은 그 숫자의 각 자리 수보다 그 왼쪽 자리 수가 작거나 같을 때 이다.
//줄어들지 않는 4자리 수를 예를 들어 보면 0011, 1111, 1112, 1122, 2223이 있다. 줄어들지 않는 4자리수는 총 715개가 있다.
//이 문제에서는 앞에 0(leading zero)이 있어도 된다. 0000, 0001, 0002는 올바른 줄어들지 않는 4자리수이다.
//n이 주어졌을 때, 줄어들지 않는 n자리 수의 개수를 구하는 프로그램을 작성하시오.
//첫째 줄에 테스트 케이스의 개수 T(1 <= T <= 1,000)이 주어진다. 각 테스트 케이스는 숫자 하나 n으로 이루어져 있다. (1 <= n <= 64)

//나의 실수  
//1.자바 배열을 처음에 int로 만들었따 숫자가 커지면서 오답이됨
//2. 처음에 디피 배열 선언을 포문 바깥에 했다. 첫번째 케이스까지는 정상 출력 됐지만 두번재 케이스부터는 첫 케이스에 누적돼서 출력이 됐다.
//포문을 돌며 덮어 쓸 것이라고 생각했는데 아니었다 왜일까 ㅠㅠ 

public class BaekJoon2688줄어들지않아 {
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);

		int t = s.nextInt(); // 테스트케이스 받아와서 for문
		for (int i = 0; i < t; i++) {
			int n = s.nextInt(); // 자릿수 받아오기

			long[][] dp = new long[n+1][10]; //input 값으로 배열의 크기 설정 0-9까지의 숫자만 들어갈 수 있음으로 두번 째 크기에는 10을 넣어줌!
			for (int m = 0; m < 10; m++) { //1의 자리로 만들 수 있는 줄어들지 않는 수는 각 자리마다 1개 뿐이다 그래서 배열 1은 모두 1로 설정
				dp[1][m] = 1;
			}

			if (n >= 2) { //사용자 입력 값이 2보다 크거나 같을 경우
				for (int j = 2; j <= n; j++) { //1번째 배열의 값은 이미 지정을 해주었느이 j는 2부터 돌도록 설정 
					long sum = 0; //누적시킬 값을 정의 (처음에는 3개의 포문을 생각했으니 이게 더 쉬운 것 같다!
					for (int k = 0; k < 10; k++) { //k 값이 돌며 각 자리에 줄어들지 않는 수를 계산해준다
						dp[j][k] += dp[j - 1][k] + sum; //2번째 자리 2의 갯수는 1자리의 (0,1.2)의 경우의 수를 합친 것이다. 그 값을 sum에 누적시켜 더해준 것  
						sum += dp[j - 1][k]; //k가 9 가 될 때까지 sum에는 0,1,2,3,4,5,6,7,8의 수들이 누적 될 것이다. 그 수를 최종적으로 위에 더해줌 
					}
				}
			}
			long result = 0; //결과값 0으로 정의 

			for (int h = 0; h < 10; h++) { //해당하는 자릿수의 모든 숫자 더하기 
				result += dp[n][h];
			}
			System.out.println(result); //결과 출력
		}

	}

}
